#!/usr/bin/env ruby

require 'net/http'
require 'json'
require 'yaml'

message_file = ARGV[0]
message = File.read(message_file) if message_file

#todo: needs a better way to switch hook mode and test mode (no message_file)
unless message
  # this is for debug/test only
  message = YAML.load_file('./fixture.yml')['commit_msg']
  puts "loading testing msg: #{message}"
end


#todo: make these prefix (type) options externalized and reconfigurable
#todo: follow types in: https://github.com/conventional-changelog/commitlint
#todo: make regex pattern externalized and reconfigurable
$regex = /^(ref|feat|fix|chore|docs): (\d+)/
# $regex = /^(ref|feat|fix|chore|docs): KAN-(\d+)/

caught = $regex.match(message)

if !caught
  #todo: need better validation message here
  puts "[POLICY] Your message is not formatted correctly"
  puts "Allowed commit message SHOULD begin with:"
  puts "ref,feat,fix,chore, or docs, followed by ':' then a ticket number, then message"
  exit 1
end

puts "Your message is formatted correctly with pattern match: #{caught}"
tkt_nbr = caught[-1]

puts "found ticket number: #{tkt_nbr}"


# get repo root folder path
repo_root = `git rev-parse --show-toplevel`.chomp  # remove trailing newline

# config file should exist
config = YAML.load_file("#{repo_root}/git-hook-config.yml")   # yml => hash

# secrets file is optional, env vars can be used instead
secret = YAML.load_file("#{repo_root}/git-hook-secret")

domain = ENV[config['env_var_kan_api_domain_name']]
unless domain
  if secret
    domain = secret['domain']
  end
end
unless domain
  puts 'domain not found for Kanbanize API'
  exit 1
end

kan_url = config['kan_api_url'].sub('<domain>', domain) + config['kan_api_get_task_details']

puts "Checking ticket #{tkt_nbr}: calling Kanbanize API: #{kan_url}"

uri = URI(kan_url)
req = Net::HTTP::Post.new(uri)
req['Content-Type'] = 'application/json'
req['Accept'] = 'application/json'

# try env var first for api key
apikey = ENV[config['env_var_kan_api_key_name']]

unless apikey
  
  if secret
    apikey = secret['apikey']
  end
end
unless apikey
  puts "Error: Kanbanize API access key not found!"
  exit 1
end

req['apikey'] = apikey

req.body = {
    :taskid => tkt_nbr
}.to_json()

res = Net::HTTP.start(uri.hostname, 
                      uri.port, 
                      :use_ssl => uri.scheme == 'https') { |http|
  http.request(req)
}

if res.code != '200'
  puts "Checking ticket #{tkt_nbr} failed with error: #{res.body || 'Unknown'}"
  exit 1
end

# at this point the kanbancize task check is successful

#todo: besides appending web url to commit message,
#todo: consider other 'call-back' functions like:
#todo: - post commit message to kanbanize taks as comment 
#todo: - look for CHANGELOG.md and add semantic version

rb = JSON.parse(res.body)

kan_task_web_url = config['kan_web_url_task']
    .sub('<domain>', domain)
    .sub('<boardid>', rb['boardid'])
    .sub('<taskid>', rb['taskid'])

tkt_web_url_msg = "\nKanbanize Ticket #{tkt_nbr} URL: #{kan_task_web_url}\n"
puts "Appending web url to message:#{tkt_web_url_msg}"

File.write(message_file, message + tkt_web_url_msg) if message_file

puts "Message saved."
puts '*' * 20 + ' commit-msg hook complete ' + '*' * 20
